#ifndef CONFIG_H
#define CONFIG_H

#include <stdint.h>

/**
 * @brief System-wide configuration parameters
 */
namespace Config {
  // Hardware pins
  constexpr uint8_t LED_DATA_PIN = 12;  // WS2812 data pin (GPIO12 confirmed in hardware analysis)
  constexpr uint8_t LED_POWER_PIN = 5;  // Power control for LEDs
  constexpr uint8_t I2C_SDA_PIN = 21;   // I2C data line
  constexpr uint8_t I2C_SCL_PIN = 22;   // I2C clock line
  
  // LED configuration
  constexpr uint8_t NUM_LEDS = 12;      // Number of LEDs in the ring
  constexpr uint8_t DEFAULT_BRIGHTNESS = 100; // Default brightness (0-255) - 39% brightness as per hardware analysis
  constexpr uint8_t LOW_POWER_BRIGHTNESS = 20;    // 0-255
  
  // Sensor configuration
  constexpr uint8_t POSITION_SAMPLE_RATE = 50;  // Hz
  constexpr uint8_t FREECAST_SAMPLE_RATE = 100; // Hz
  
  // Position detection
  constexpr uint16_t AXIS_THRESHOLD = 1500;     // Minimum value for dominant axis
  constexpr uint8_t MIN_CONFIDENCE = 60;        // Minimum confidence for position change
  constexpr uint16_t DEBOUNCE_TIME_MS = 100;    // Position debounce time
  
  // Position detection thresholds (calibrated for back-of-hand mounting)
  // From calibration_data_20250326_011013.csv
  constexpr float THRESHOLD_OFFER = 18900.09f;    // accelZ > threshold
  constexpr float THRESHOLD_CALM = 2014.40f;      // accelZ < threshold
  constexpr float THRESHOLD_OATH = -12475.42f;    // accelY < threshold
  constexpr float THRESHOLD_DIG = 3106.71f;       // accelY > threshold
  constexpr float THRESHOLD_SHIELD = -14224.77f;  // accelX < threshold
  constexpr float THRESHOLD_NULL = 1281.05f;      // accelX > threshold
  
  // UBPD Default position thresholds in m/sÂ² (for UltraBasicPositionDetector)
  // Update these values after calibration with values from serial output
  constexpr float DEFAULT_POSITION_THRESHOLDS[6] = {
    7.97f,  // POS_OFFER (Z axis positive)
    -7.53f, // POS_CALM (Z axis negative)
    6.50f,  // POS_OATH (Y axis positive) - Lowered from 10.28f to make it easier to trigger
    -4.32f, // POS_DIG (Y axis negative)
    -5.09f, // POS_SHIELD (X axis negative)
    7.19f,  // POS_NULLPOS (X axis positive)
  };
  
  /**
   * UBPD Calibrated Thresholds
   * 
   * These values are generated by the UBPDCalibrationProtocol and should be
   * updated after running a calibration session. The calibration process:
   * 
   * 1. Collects multiple samples (150+ readings) for each hand position
   * 2. Calculates the mean accelerometer values for each axis (X, Y, Z)
   * 3. Determines the dominant axis for each position based on highest absolute value
   * 4. Sets the threshold to 85% of the measured value to account for variations
   * 5. Preserves the sign of the dominant axis reading
   * 
   * To update these values:
   * 1. Run the UBPDCalibrationProtocol.cpp example
   * 2. Complete the calibration process for all positions
   * 3. Copy the generated Config.h format values from the serial output
   * 4. Paste them below, replacing the current values
   * 5. Include the calibration date in the comment
   * 
   * Last calibration: 2025-03-30
   */
  namespace Calibrated {
    // Values from successful calibration on 2025-03-30
    constexpr float OFFER_THRESHOLD = 8.25f;   // Z-axis dominant positive
    constexpr float CALM_THRESHOLD = -8.34f;   // Z-axis dominant negative
    constexpr float OATH_THRESHOLD = -7.92f;   // Y-axis dominant negative
    constexpr float DIG_THRESHOLD = 7.81f;     // Y-axis dominant positive
    constexpr float SHIELD_THRESHOLD = -7.65f; // X-axis dominant negative
    constexpr float NULL_THRESHOLD = 7.47f;    // X-axis dominant positive
    
    // Dominant axes for each position (0 = X, 1 = Y, 2 = Z)
    constexpr uint8_t OFFER_AXIS = 2;    // Z-axis
    constexpr uint8_t CALM_AXIS = 2;     // Z-axis
    constexpr uint8_t OATH_AXIS = 1;     // Y-axis
    constexpr uint8_t DIG_AXIS = 1;      // Y-axis
    constexpr uint8_t SHIELD_AXIS = 0;   // X-axis
    constexpr uint8_t NULL_AXIS = 0;     // X-axis
  }
  
  // Timing parameters
  constexpr uint16_t CALMOFFER_WINDOW_MS = 1000;  // Time window for CalmOffer gesture
  constexpr uint16_t LONGNULL_TIME_MS = 5000;     // Time required for LongNull gesture (deprecated)
  constexpr uint16_t LONGNULL_WARNING_MS = 3000;  // When to start flashing during LongNull (deprecated)
  constexpr uint16_t LONGSHIELD_TIME_MS = 5000;   // Time required for LongShield gesture
  constexpr uint16_t LONGSHIELD_WARNING_MS = 3000; // When to start flashing during LongShield
  constexpr uint16_t QUICKCAST_WINDOW_MS = 1000;   // Time window for QuickCast gestures
  
  // Gesture detection parameters
  namespace Gestures {
    constexpr uint16_t CALM_OFFER_MAX_TIME_MS = 1000; // Max time between Calm and Offer for gesture detection
    constexpr uint16_t LONG_NULL_TIME_MS = 5000;      // Time required in NULL position to trigger Long Null
  }
  
  // Freecast timing
  constexpr uint16_t FREECAST_COLLECTION_MS = 2000; // Motion data collection window (Corrected to 2s)
  constexpr uint16_t FREECAST_DISPLAY_MS = 2000;    // Pattern display duration (Corrected to 2s)
  
  // Power management
  constexpr uint32_t IDLE_SLEEP_DELAY_MS = 300000; // Time before entering sleep mode (5 min)
  
  // Define position colors (R, G, B)
  namespace Colors {
    constexpr uint8_t OFFER_COLOR[3] = {128, 0, 255};    // Purple (more blue)
    constexpr uint8_t CALM_COLOR[3] = {0, 0, 255};       // Blue (was Yellow)
    constexpr uint8_t OATH_COLOR[3] = {255, 255, 0};     // Yellow (was Red)
    constexpr uint8_t DIG_COLOR[3] = {0, 255, 0};        // Green (unchanged)
    constexpr uint8_t SHIELD_COLOR[3] = {255, 105, 180}; // Pink (was Blue)
    constexpr uint8_t NULL_COLOR[3] = {255, 0, 0};       // Red (was Orange)
    constexpr uint8_t UNKNOWN_COLOR[3] = {255, 255, 255}; // White
    constexpr uint8_t BLACK[3] = {0, 0, 0};          // Black
    constexpr uint8_t RED[3] = {255, 0, 0};          // Red
    constexpr uint8_t BLUE[3] = {0, 0, 255};         // Blue
    constexpr uint8_t PURPLE[3] = {128, 0, 128};     // Purple
    
    constexpr uint8_t POSITION_COLORS[7][3] = {
        {255, 0, 0},       // POS_NULL: Red (was Orange)
        {255, 105, 180},   // POS_SHIELD: Pink (was Green/Blue)
        {128, 0, 255},     // POS_OFFER: Purple (more blue) (was Blue)
        {255, 255, 0},     // POS_OATH: Yellow (was Magenta/Red)
        {0, 255, 0},       // POS_DIG: Green (unchanged)
        {0, 0, 255},       // POS_CALM: Blue (was Cyan/Yellow)
        {255, 127, 0}      // POS_UNDEFINED: Orange (unchanged)
    };
    
    // Countdown color constant for consistent usage
    struct Color {
      uint8_t r;
      uint8_t g;
      uint8_t b;
    };
    constexpr Color SHIELD_COUNTDOWN_COLOR = {Config::Colors::SHIELD_COLOR[0], Config::Colors::SHIELD_COLOR[1], Config::Colors::SHIELD_COLOR[2]}; // Corrected to use Shield color array
  }

  // System power states
  constexpr unsigned long IDLE_TIMEOUT = 30000;  // Time before entering low power (30s)

  // QuickCast Spell Parameters <-- Added Namespace
  namespace Spells {
    constexpr uint16_t RAINBOW_DURATION_MS = 8000;   // Rainbow Burst duration (8s)
    constexpr uint16_t LIGHTNING_DURATION_MS = 5000; // Lightning Blast duration (5s)
    constexpr uint16_t LUMINA_DURATION_MS = 20000;  // Lumina duration (20s)
    constexpr uint8_t LUMINA_BRIGHTNESS = 204;      // Lumina brightness (80% of 255)
  }
}

#endif // CONFIG_H 